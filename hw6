#include "host_fe.h"
#include "helper.h"
#include <stdio.h>
#include <stdlib.h>

void host_fe(int filter_width,
             float *filter,
             int image_height,
             int image_width,
             float *input_image,
             float *output_image,
             cl_device_id *device,
             cl_context *context,
             cl_program *program)
{
    cl_int status;
    int filter_size = filter_width * filter_width;
    int image_size = image_height * image_width;

    // 1. 建立命令佇列
    cl_command_queue queue = clCreateCommandQueue(*context, *device, 0, &status);
    if (status != CL_SUCCESS) {
        fprintf(stderr, "Failed to create command queue: %d\n", status);
        exit(1);
    }

    // 2. 建立緩衝區
    cl_mem d_input = clCreateBuffer(*context, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR,
                                    sizeof(float) * image_size, input_image, &status);
    if (status != CL_SUCCESS) {
        fprintf(stderr, "Failed to create input buffer: %d\n", status);
        exit(1);
    }

    cl_mem d_output = clCreateBuffer(*context, CL_MEM_WRITE_ONLY,
                                     sizeof(float) * image_size, NULL, &status);
    if (status != CL_SUCCESS) {
        fprintf(stderr, "Failed to create output buffer: %d\n", status);
        exit(1);
    }

    cl_mem d_filter = clCreateBuffer(*context, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR,
                                     sizeof(float) * filter_size, filter, &status);
    if (status != CL_SUCCESS) {
        fprintf(stderr, "Failed to create filter buffer: %d\n", status);
        exit(1);
    }

    // 3. 建立 kernel
    cl_kernel kernel = clCreateKernel(*program, "convolution", &status);
    if (status != CL_SUCCESS) {
        fprintf(stderr, "Failed to create kernel: %d\n", status);
        exit(1);
    }

    // 4. 設定 kernel 參數
    printf("filter_width = %d\n", filter_width); // debug
    status  = clSetKernelArg(kernel, 0, sizeof(cl_mem), &d_input);
    status |= clSetKernelArg(kernel, 1, sizeof(cl_mem), &d_output);
    status |= clSetKernelArg(kernel, 2, sizeof(cl_mem), &d_filter);
    status |= clSetKernelArg(kernel, 3, sizeof(int), &image_height);
    status |= clSetKernelArg(kernel, 4, sizeof(int), &image_width);
    status |= clSetKernelArg(kernel, 5, sizeof(int), &filter_width);
    if (status != CL_SUCCESS) {
        fprintf(stderr, "Failed to set kernel args: %d\n", status);
        exit(1);
    }

    // 5. 啟動 kernel
    size_t global[2] = { (size_t)image_width, (size_t)image_height }; // x, y
    status = clEnqueueNDRangeKernel(queue, kernel, 2, NULL, global, NULL, 0, NULL, NULL);
    if (status != CL_SUCCESS) {
        fprintf(stderr, "Failed to enqueue kernel: %d\n", status);
        exit(1);
    }

    // 6. 等待 kernel 執行完畢
    clFinish(queue);

    // 7. 讀回結果
    status = clEnqueueReadBuffer(queue, d_output, CL_TRUE, 0, sizeof(float) * image_size, output_image, 0, NULL, NULL);
    if (status != CL_SUCCESS) {
        fprintf(stderr, "Failed to read output buffer: %d\n", status);
        exit(1);
    }

    // 8. 釋放資源
    clReleaseMemObject(d_input);
    clReleaseMemObject(d_output);
    clReleaseMemObject(d_filter);
    clReleaseKernel(kernel);
    clReleaseCommandQueue(queue);
}

__kernel void convolution(
    __global const float* input,
    __global float* output,
    __global const float* filter,
    int image_height,
    int image_width,
    int filter_width)
{
    int x = get_global_id(0);
    int y = get_global_id(1);

    if (x >= image_width || y >= image_height) return;

    int half = filter_width / 2;
    float sum = 0.0f;

    for (int fy = 0; fy < filter_width; fy++) {
        for (int fx = 0; fx < filter_width; fx++) {
            int iy = y + fy - half;
            int ix = x + fx - half;
            if (iy >= 0 && iy < image_height && ix >= 0 && ix < image_width) {
                sum += input[iy * image_width + ix] * filter[fy * filter_width + fx];
            }
        }
    }
    output[y * image_width + x] = sum;
}
