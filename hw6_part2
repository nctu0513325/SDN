#include <cuda_runtime.h>
#include <stdio.h>

__global__ void convolution(
    const float* input,
    float* output,
    const float* filter,
    int image_height,
    int image_width,
    int filter_width)
{
    int y = blockIdx.y * blockDim.y + threadIdx.y;
    int x = blockIdx.x * blockDim.x + threadIdx.x;

    if (y >= image_height || x >= image_width) return;

    int half = filter_width / 2;
    float sum = 0.0f;

    for (int fy = 0; fy < filter_width; fy++) {
        for (int fx = 0; fx < filter_width; fx++) {
            int iy = y + fy - half;
            int ix = x + fx - half;
            if (iy >= 0 && iy < image_height && ix >= 0 && ix < image_width) {
                sum += input[iy * image_width + ix] * filter[fy * filter_width + fx];
            }
        }
    }
    output[y * image_width + x] = sum;
}

void host_fe_cuda(
    int filter_width,
    float* filter,
    int image_height,
    int image_width,
    float* input_image,
    float* output_image)
{
    int image_size = image_height * image_width * sizeof(float);
    int filter_size = filter_width * filter_width * sizeof(float);

    float *d_input, *d_output, *d_filter;
    cudaMalloc(&d_input, image_size);
    cudaMalloc(&d_output, image_size);
    cudaMalloc(&d_filter, filter_size);

    cudaMemcpy(d_input, input_image, image_size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_filter, filter, filter_size, cudaMemcpyHostToDevice);

    dim3 block(16, 16);
    dim3 grid((image_width + block.x - 1) / block.x, (image_height + block.y - 1) / block.y);

    convolution<<<grid, block>>>(d_input, d_output, d_filter, image_height, image_width, filter_width);

    cudaMemcpy(output_image, d_output, image_size, cudaMemcpyDeviceToHost);

    cudaFree(d_input);
    cudaFree(d_output);
    cudaFree(d_filter);
}
